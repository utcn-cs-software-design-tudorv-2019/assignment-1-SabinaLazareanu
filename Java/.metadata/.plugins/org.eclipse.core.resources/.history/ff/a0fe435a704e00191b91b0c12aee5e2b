package assigment1.tucn.cs.UI;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Objects;

import assigment1.tucn.cs.BLL.LoginService;
import assigment1.tucn.cs.DAL.ExecutionException;
import assigment1.tucn.cs.DAL.Student;
import assigment1.tucn.cs.DAL.StudentBuilder;
import assigment1.tucn.cs.DAL.StudentRepository;
import assigment1.tucn.cs.DAL.Teacher;
import assigment1.tucn.cs.DAL.TeacherRepository;
import assigment1.tucn.cs.DAL.User;
import assigment1.tucn.cs.DAL.UserRepository;
import assigment1.tucn.cs.database.config.JDBConnectionConfig;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;
import javafx.scene.layout.Pane;
import javafx.stage.Stage;

public class Controller {

	private static final String fileToKeepIdCurentUser = System.getProperty("user.home") + File.separator
			+ "currentUserId.txt";
	private static final String SCHEMA = "university_db";
	private String checkUser;
	private String checkPassword;
	private User currentStudent;
	private JDBConnectionConfig dbConnectionWrapper = new JDBConnectionConfig(SCHEMA);
	private StudentRepository studentRepo = new StudentRepository(dbConnectionWrapper);
	private TeacherRepository teacherRepo = new TeacherRepository(dbConnectionWrapper);
	private UserRepository userRepo = new UserRepository(dbConnectionWrapper);
	private LoginService loginService = new LoginService(studentRepo, userRepo);

	@FXML
	private Button loginButton;

	@FXML
	private Label messageField;

	@FXML
	private TextField password;

	@FXML
	private TextField userName;

	@FXML
	private TextField addressField;

	@FXML
	private TextField groupField;

	@FXML
	private TextField idField;

	@FXML
	private TextField pncField;

	@FXML
	private TextField nameField;

	@FXML
	private TextField icnField;

	@FXML
	void updateStudentButtonClicked(ActionEvent event) {
		try {
			System.out.println("Update!");
			Student currentUser = (Student) loginService.getCurrentUserUser();
			Student studentToBeUpdated = new StudentBuilder().setGroup(groupField.getText()).build();
			studentToBeUpdated.setIdStudent(currentUser.getIdStudent());
			studentToBeUpdated.setIdUser(currentUser._getIdUser());
			studentToBeUpdated.setName(nameField.getText());
			studentToBeUpdated.setAddress(addressField.getText());
			studentToBeUpdated.setPNC(pncField.getText());
			studentToBeUpdated.setICN(icnField.getText());

			loginService.updateStudent(studentToBeUpdated);
		} catch (ExecutionException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	@FXML
	void loginButtonClicked(ActionEvent event) {
		checkUser = userName.getText().toString();
		checkPassword = password.getText().toString();
		try {
			currentStudent = loginService.login(checkUser, checkPassword);
			if (currentStudent instanceof Teacher) {
			} else if (currentStudent instanceof Student) {

				Stage stage = (Stage) loginButton.getScene().getWindow();
				stage.close();

				studentPage();

				System.out.println("Aiciiiii: " + currentStudent.getAddress());
				loginService.setCurrentUser(((Student) currentStudent).getIdStudent());
				System.out.println(currentStudent.getName());

			} else if (Objects.isNull(currentStudent)) {
				messageField.setText("Username or password invalid!!");
			}
		} catch (ExecutionException | IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}

	private void studentPage() throws IOException {
		Stage studentStage = new Stage();
		studentStage.setTitle("Student:");
		Pane pane = FXMLLoader.load(getClass().getResource("student.fxml"));
		studentStage.setScene(new Scene(pane, 1011, 540));
		studentStage.show();
	}

	private void fillStudentFields(User user) {
		this.nameField.setText(user.getName());
	}

	private void seveIdCurrentUser(Long id) {

		try (FileWriter fileWriter = new FileWriter(fileToKeepIdCurentUser)) {
			fileWriter.write("" + id);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	private Long getCurrentUser() {
		try (FileReader fileReader = new FileReader(fileToKeepIdCurentUser)) {
			int id = fileReader.read();
			while (id != -1) {
				id = fileReader.read();
			}
		} catch (FileNotFoundException e) {
			// exception handling
		} catch (IOException e) {
			// exception handling
		}
		return id
	}

}
