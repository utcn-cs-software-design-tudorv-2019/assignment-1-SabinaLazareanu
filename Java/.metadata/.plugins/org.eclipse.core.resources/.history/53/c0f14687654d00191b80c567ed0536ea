package assigment1.tucn.cs.BLL;

import static assigment1.tucn.cs.BLL.utils.SqlQueries.SELECT_ALL_QUERIE;
import static assigment1.tucn.cs.BLL.utils.SqlQueries.SELECT_BY_ID;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import assigment1.tucn.cs.BLL.utils.ETables;
import assigment1.tucn.cs.DAL.Student;
import assigment1.tucn.cs.DAL.StudentBuilder;
import assigment1.tucn.cs.database.config.JDBConnectionConfig;

public class Repository implements AbstractRepository {
	private final JDBConnectionConfig connectionWrapper;
	private static final String PATTERN = "{}";

	public Repository(JDBConnectionConfig dbConnectionWrapper) {
		connectionWrapper = dbConnectionWrapper;
	}

	@Override
	public List<?> findAll(ETables table) throws ExecutionException {
		Connection connection = connectionWrapper.getConnection();
		List<Object> objects = new ArrayList<>();

		try (PreparedStatement statement = connection
				.prepareStatement(SELECT_ALL_QUERIE.replace(PATTERN, table.getValue()));) {
			try (ResultSet resultSet = statement.executeQuery();) {

				while (resultSet.next()) {
					switch (table) {
					case STUDENT:
						objects.add(getStudentFromResultSet(resultSet));
						break;

					case TEACHER:
						objects.add(getTeacherFromResultSet(resultSet));
						break;
					default:
						break;
					}
				}
			}
		} catch (SQLException e) {
			throw new ExecutionException(e.getMessage());
		}

		return objects;
	}

	@Override
	public void delete(Long id, ETables table) throws ExecutionException {
		Connection connection = connectionWrapper.getConnection();
		PreparedStatement statement = null;
		try {
			statement.setLong(1, id);
			statement.execute();
		} catch (Exception e) {
			throw new ExecutionException(e.getMessage());
		}

	}

	@Override
	public Object getById(Long id, ETables table) throws ExecutionException {
		Connection connection = connectionWrapper.getConnection();
		Object object = null;

		try (PreparedStatement statement = connection
				.prepareStatement(SELECT_BY_ID.replace(PATTERN, table.getValue()));) {
			statement.setLong(1, id);
			try (ResultSet resultSet = statement.executeQuery();) {
				if (resultSet.next()) {
					switch (table) {
					case STUDENT:
						object = getStudentFromResultSet(resultSet);
						break;
					case TEACHER:
						object = getTeacherFromResultSet(resultSet);
						break;
					default:
						break;
					}
				}
			}
		} catch (SQLException e) {
			throw new ExecutionException(e.getMessage());
		}

		return object;
	}

	private Student getStudentFromResultSet(ResultSet rs) throws SQLException {
		return new StudentBuilder().setId(rs.getLong("id")).setIdUser(rs.getLong("User_id"))
				.setUserName(rs.getString("user_name")).setPassword(rs.getString("password"))
				.setGroup(rs.getString("group")).build();
	}

	private Student getTeacherFromResultSet(ResultSet rs) throws SQLException {
		return new StudentBuilder().setId(rs.getLong("id")).setIdUser(rs.getLong("User_id"))
				.setUserName(rs.getString("user_name")).setPassword(rs.getString("password")).build();
	}

}
