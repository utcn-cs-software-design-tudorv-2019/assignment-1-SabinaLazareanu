package assigment1.tucn.cs.DAL.repository;

import static assigment1.tucn.cs.BLL.utils.SqlQueries.DELETE_BY_ID_QUERY;
import static assigment1.tucn.cs.BLL.utils.SqlQueries.SELECT_ALL_QUERY;
import static assigment1.tucn.cs.BLL.utils.SqlQueries.SELECT_BY_ID_QUERY;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import assigment1.tucn.cs.BLL.utils.ETables;
import assigment1.tucn.cs.DAL.EnrollementBuilder;
import assigment1.tucn.cs.DAL.ExecutionException;
import assigment1.tucn.cs.DAL.StudentBuilder;
import assigment1.tucn.cs.DAL.TeacherBuilder;
import assigment1.tucn.cs.DAL.UserBuilder;
import assigment1.tucn.cs.DAL.model.Enrollement;
import assigment1.tucn.cs.DAL.model.Student;
import assigment1.tucn.cs.DAL.model.Teacher;
import assigment1.tucn.cs.DAL.model.User;
import assigment1.tucn.cs.database.config.JDBConnectionConfig;

public abstract class Repository implements IRepository {
	private final JDBConnectionConfig connectionWrapper;

	private static final String PATTERN = "{}";

	public Repository(JDBConnectionConfig dbConnectionWrapper) {
		connectionWrapper = dbConnectionWrapper;
	}

	public JDBConnectionConfig getConnectionWrapper() {
		return connectionWrapper;
	}

	@Override
	public List<?> findAll(ETables table) throws ExecutionException {
		Connection connection = connectionWrapper.getConnection();
		List<Object> objects = new ArrayList<>();

		try (PreparedStatement statement = connection
				.prepareStatement(SELECT_ALL_QUERY.replace(PATTERN, table.getValue()));) {
			try (ResultSet resultSet = statement.executeQuery();) {

				while (resultSet.next()) {
					switch (table) {
					case STUDENT:
						objects.add(getStudentFromResultSet(resultSet));
						break;

					case TEACHER:
						objects.add(getTeacherFromResultSet(resultSet));
						break;
					case USER:
						objects.add(getUserFromResultSet(resultSet));
						break;
					default:
						break;
					}
				}
			}
		} catch (SQLException e) {
			throw new ExecutionException(e.getMessage());
		}

		return objects;
	}

	@Override
	public void delete(Long id, ETables table) throws ExecutionException {
		Connection connection = connectionWrapper.getConnection();

		try (PreparedStatement statement = connection
				.prepareStatement(DELETE_BY_ID_QUERY.replace(PATTERN, table.getValue()))) {
			statement.setLong(1, id);
			statement.execute();
		} catch (Exception e) {
			throw new ExecutionException(e.getMessage());
		}

	}

	@Override
	public Object getById(Long id, ETables table) throws ExecutionException {
		Connection connection = connectionWrapper.getConnection();
		Object object = null;

		try (PreparedStatement statement = connection
				.prepareStatement(SELECT_BY_ID_QUERY.replace(PATTERN, table.getValue()));) {
			statement.setLong(1, id);
			try (ResultSet resultSet = statement.executeQuery();) {
				if (resultSet.next()) {
					switch (table) {
					case STUDENT:
						object = getStudentFromResultSet(resultSet);
						break;
					case TEACHER:
						object = getTeacherFromResultSet(resultSet);
						break;
					case USER:
						object = getUserFromResultSet(resultSet);
						break;
					default:
						break;
					}
				}
			}
		} catch (SQLException e) {
			throw new ExecutionException(e.getMessage());
		}

		return object;
	}

	public Student getStudentFromResultSet(ResultSet rs) throws SQLException {
		return new StudentBuilder().setId(rs.getLong("id")).setIdUser(rs.getLong("User_id"))
				.setUserName(rs.getString("user_name")).setPassword(rs.getString("password"))
				.setGroup(rs.getString("groupF")).build();
	}

	public Teacher getTeacherFromResultSet(ResultSet rs) throws SQLException {
		return new TeacherBuilder().setId(rs.getLong("id")).setIdUser(rs.getLong("User_id"))
				.setUserName(rs.getString("user_name")).setPassword(rs.getString("password")).build();
	}

	public User getUserFromResultSet(ResultSet rs) throws SQLException {
		return new UserBuilder().setId(rs.getLong("id")).setName(rs.getString("name")).setPNC(rs.getString("PNC"))
				.setAddress(rs.getString("address")).setINC(rs.getString("ICN")).build();
	}

	public Enrollement getEnrolleFromResultSet(ResultSet rs) throws SQLException {
		return new EnrollementBuilder().setIdStudent(rs.getLong("Student_id")).setIdCours(rs.getLong("Group_id"))
				.setGrade(rs.getFloat("grade")).build();
	}
	
	public Cours getCoursFromResultSet(ResultSet rs) throws SQLException{
		
	}
}
